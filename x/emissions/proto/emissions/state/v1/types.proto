syntax = "proto3";
package emissions.state.v1;

option go_package = "github.com/evoluteai-network/evoluteai-chain/x/emissions";

import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Params defines the parameters of the module.
message Params {
  string version = 1;      // version of the protocol should be in lockstep with github release tag version
  int64 epoch_length = 2;  // length of an "epoch" for rewards payouts in blocks
  string min_topic_unmet_demand = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // total unmet demand for a topic < this => don't run inference solicatation or weight-adjustment
  uint64 max_topics_per_block = 4;  // max number of topics to run cadence for per block
  string min_request_unmet_demand = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // delete requests if they have below this demand remaining
  string max_missing_inference_percent = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // if a worker has this percentage of inferences missing, penalize them
  string required_minimum_stake = 7 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                                           // minimum amount of tokens to send to stake as a reputer or worker
  uint64 remove_stake_delay_window = 8;        // how long to wait before allowed to remove stake
  uint64 min_request_cadence = 9;              // Fastest allowed cadence of a repeating inference request
  uint64 min_weight_cadence = 10;              // Fastest allowed cadence of uploading weights
  uint64 max_inference_request_validity = 11;  // longest time a subscription of inferences is allowed to be valid
  uint64 max_request_cadence = 12;  // slowest (largest) amount of time a subscription can take between inferences
  string percent_rewards_reputers_workers = 13 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // rewards (tx fees + inflation) paid to workers/reputers. Validators get the rest
}

// GenesisState is the state that must be provided at genesis.
message GenesisState {
  // params defines all the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
  repeated string core_team_addresses = 2;
}

message StakeInfo {
  string address = 1;
  string amount = 2;
}

message Topic {
  uint64 id = 1;
  string creator = 2;
  string metadata = 3;
  string weight_logic = 4;
  string weight_method = 5;
  uint64 weight_cadence = 6;
  uint64 weight_last_ran = 7;
  string inference_logic = 8;
  string inference_method = 9;
  uint64 inference_cadence = 10;
  uint64 inference_last_ran = 11;
  bool active = 12;
  string default_arg = 13;
}

message TopicList {
  repeated Topic topics = 1;
}

message Weight {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  string reputer = 2;
  string worker = 3;
  string weight = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message Weights {
  repeated Weight weights = 1;
}

message Inference {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  string worker = 2;
  string value = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  bytes extra_data = 4;
  string proof = 5;
}

message Inferences {
  repeated Inference inferences = 1;
}

message OffchainNode {
  string lib_p2p_key = 1;    // LibP2P key of the node
  string multi_address = 2;  // Network address for accessing the node
  string owner = 3;
  string node_address = 4;
  string node_id = 5;
}

message OffchainNodes {
  repeated Inference offchain_node = 1;
}

message InferenceSetForScoring {
  uint64 topic_id = 1;
  uint64 timestamp = 2;
  Inferences inferences = 3;
}

message StakePlacement {
  string target = 1;
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message StakeRemovalPlacement {
  repeated uint64 topic_ids = 1;
  string target = 2;
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message StakeRemoval {
  uint64 timestamp_removal_started = 1;
  repeated StakeRemovalPlacement placements = 3;
}

// num_inference_possible = bid_amount / max_price_per_inference,
// length of time this inference repeats for =  num_inference_possible * cadence
message InferenceRequest {
  string sender = 1;
  uint64 nonce = 2;
  uint64 topic_id = 3;
  uint64 cadence = 4;  // time in seconds between inferences, zero means oneshot inference
  string max_price_per_inference = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // the maximum price per inference that alice is willing to pay
  string bid_amount = 6 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                        // how many funds to send from alice with this Inference Request
  uint64 last_checked = 7;  // the last time the inference was checked and was possibly drawn from
  uint64 timestamp_valid_until = 8;
  bytes extra_data = 9;
}
